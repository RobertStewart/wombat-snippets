#-----------------------------------
# Portable Aliases
#-----------------------------------

alias grep='grep --color'
alias l='ls -lh'
alias ll='ls -lh'
alias ls='ls -HGF'
alias la='ls -ah'
alias lr='ls -R'
alias md='mkdir -p'
alias ...='cd ../..'
alias ....='cd ../../..'
alias h='history'
alias whereami='curl -s http://api.hostip.info/get_html.php?ip=$1'

#-----------------------------------
# OS X Aliases
#-----------------------------------

# Top 10 memory and CPU consuming processes. Good for Geektool. On Linux, use auxf.
alias psmemtop='ps aux | sort -nr -k 4 | head -10'
alias pscputop='ps aux | sort -nr -k 3 | head -10'

# a less cpu intensive top. BSD-specific?
alias ttop='top -ocpu -R -F -s 2 -n30'

# Miscellaneous commands
alias spot='mdfind -onlyin `pwd`'
alias filemon=fs_usage

# Delete all .DS_Store files in current dir and its children
alias ds_store_rm='find . -name '.DS_Store' -print0 | xargs -t0 rm'

# Log SQL statements. If local MySQL, you must connect with --protocol=tcp. Assumes Wireshark installed.
alias mysqllog="sudo tshark -i lo0 -V -f 'dst port 3306' | egrep 'Statement:|Statement \[truncated\]:'"

# Start and stop MySQL
alias mysql_start="/Library/StartupItems/MySQLCOM/MySQLCOM start"
alias mysql_stop="/Library/StartupItems/MySQLCOM/MySQLCOM stop"


#-----------------------------
# Machine Specific Functions
#   i.e., may require additional setup of MySQL, Python, Java, etc.
#-----------------------------

# Launch MySQL CLI in batch mode, i.e., query results are just tab-separated values
alias mybatch='mysql -B -N '


#-----------------------------------
# Portable Functions
#-----------------------------------

# cd's up directory path by the specified number of levels. Defaults to 1.
function ..() {
  local arg=${1:-1};
  while [ $arg -gt 0 ]; do
  cd .. >&/dev/null;
  arg=$(($arg - 1));
  done
}

# Usage:
#    $ some_command ; notify
# After the command finishes, email is sent to space-delimited list of email addresses in mail variable
# Especially useful if you use a mobile carrier address that sends you a text message
# For example, nnnnnnnnnn@messaging.sprintpcs.com
function notify() {
    # NOTE!!! Set mail var to desired list of email addresses.
    mail=""
    str1="`history 1 | cut -b 8-`"
    str2="${str1%;*}"
    echo ${str2} | mail -s CMD_FINISH ${mail}
}

# bash function to decompress archives - http://www.shell-fu.org/lister.php?id=375  
function extract() {  
    if [ -f $1 ] ; then  
        case $1 in  
            *.tar.bz2)   tar xvjf $1        ;;  
            *.tar.gz)    tar xvzf $1     ;;  
            *.bz2)       bunzip2 $1       ;;  
            *.rar)       unrar x $1     ;;  
            *.gz)        gunzip $1     ;;  
            *.tar)       tar xvf $1        ;;  
            *.tbz2)      tar xvjf $1      ;;  
            *.tgz)       tar xvzf $1       ;;  
            *.zip)       unzip $1     ;;  
            *.Z)         uncompress $1  ;;  
            *.7z)        7z x $1    ;;  
            *)           echo "'$1' cannot be extracted via >extract<" ;;  
        esac  
    else  
        echo "'$1' is not a valid file"  
    fi  
}

# Show current git branch in prompt
function find_git_branch {
    local dir=. head
    until [ "$dir" -ef / ]; do
        if [ -f "$dir/.git/HEAD" ]; then
            head=$(< "$dir/.git/HEAD")
            if [[ $head == ref:\ refs/heads/* ]]; then
                git_branch="[${head##*/}]"
            elif [[ $head != '' ]]; then
                git_branch='[detached]'
            else
                git_branch='[unknown]'
            fi
            return
        fi
        dir="../$dir"
    done
    git_branch=''
}
PROMPT_COMMAND="find_git_branch; $PROMPT_COMMAND"
export PS1="\W\$git_branch% "


#-------------------------
# OS X Specific Functions
#-------------------------

# Show ssh sessions with a different style.
# TERM_PROGRAM doesn't get set if we are logged in remotely,
# but then the originating Terminal could have done this (hopefully).
if [ "$TERM_PROGRAM" = "Apple_Terminal" ]; then
    function ssh() {
        # Better to write AppleScript cmd to get previous style then hardcode here
        SetTerminalStyle Novel
        command ssh "$@"
        SetTerminalStyle Basic
    }
fi

# Open man page in TextMate.
#   arg1 = command name
function mateman() {
    MANWIDTH=160 MANPAGER='col -bx' man $@ | mate
}

# Quit OS X apps from command line.
#   vararg = app names
function quit() {
    for app in $*; do
        osascript -e 'quit app "'$app'"'
    done
}

# Relaunch OS X apps from command line.
#   vararg = app names
function relaunch() {
    for app in $*; do
        osascript -e 'quit app "'$app'"';
        sleep 3;
        open -a $app
    done
}

# spotlight powered locate
function slocate() {
    mdfind "kMDItemDisplayName == '$@'wc";
}

# cd's to frontmost window of Finder
function cdf() {
    cd "`osascript -e 'tell application "Finder"' \
    -e 'set myname to POSIX path of (target of window 1 as alias)' \
    -e 'end tell' 2>/dev/null`"
}

# Moves files to trash, rather than immediately deleting them
function trash () {
    local path
    for path in "$@"; do
        # ignore any arguments
        if [[ "$path" = -* ]];
        then :
        else local dst=${path##*/}
            # append the time if necessary
            while [ -e ~/.Trash/"$dst" ]; do
                dst="$dst "$(date +%H-%M-%S)
            done
            mv "$path" ~/.Trash/"$dst"
        fi
    done
}

#-----------------------------
# Machine Specific Functions
#   i.e., may require additional setup of MySQL, Python, Java, etc.
#-----------------------------

# Serve current dir on specified port (8000 by default)
function serve() {
    python -m SimpleHTTPServer ${1:-8000}
}

# Return list of queries actually executing on a MySQL server
#   arg1 = user
#   arg2 = host, will use localhost if omitted
function dbq() {
    echo "SHOW PROCESSLIST" | mysql -u $1 -h ${2:-localhost} -p -t | grep -E "(^\| Id|^\+|Query)"
}

# Adds to the CLASSPATH environment variable for Java
#   vararg = classpath entries to add
function addcp() {
    for i in "$@";
    do
        export CLASSPATH=$CLASSPATH${CLASSPATH:+:}"$i";
    done
}

# Pretty prints JSON from one file to another, or to stdout
#   arg1 = file name with ugly JSON
#   arg2 = file name to which to write pretty JSON. If none specified, write to stdout.
function prettyjson() {
    if [ "$2" != "" ]; then
        cat $1 | python -mjson.tool > $2
    else
        cat $1 | python -mjson.tool 2>&1
    fi
}

# Show all git branches by last modified date
# > recent_branches
function recent_branches() {
  for k in `git branch -r|perl -pe s/^..//`;do echo -e `git show --pretty=format:"%Cgreen%ci %Cblue%cr%Creset" $k|head -n 1`\\t$k;done|sort  
}

